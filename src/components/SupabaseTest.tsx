'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';

export function SupabaseTest() {
  const [status, setStatus] = useState<string>('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  const [details, setDetails] = useState<string[]>([]);

  useEffect(() => {
    testSupabaseConnection();
  }, []);

  const testSupabaseConnection = async () => {
    const testResults: string[] = [];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
      if (!supabase) {
        setStatus('‚ùå –û—à–∏–±–∫–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        testResults.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏ NEXT_PUBLIC_SUPABASE_ANON_KEY');
        setDetails(testResults);
        return;
      }
      
      testResults.push('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        testResults.push(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
      } else if (user) {
        testResults.push(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.email}`);
      } else {
        testResults.push('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: connectionTest, error: connectionError } = await supabase
        .from('values')
        .select('count')
        .limit(1);
      
      if (connectionError) {
        setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        testResults.push(`–û—à–∏–±–∫–∞: ${connectionError.message}`);
        
        if (connectionError.code === 'PGRST116') {
          testResults.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ "values" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          testResults.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã');
        }
      } else {
        testResults.push('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
        testResults.push('‚úÖ –¢–∞–±–ª–∏—Ü–∞ "values" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        const { data: countData, error: countError } = await supabase
          .from('values')
          .select('*', { count: 'exact' });
          
        if (!countError) {
          testResults.push(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${countData?.length || 0}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
        const testValue = {
          title_et: 'Test Value',
          title_ru: '–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å',
          description_et: 'Test description',
          description_ru: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
          icon: 'üß™',
          order_index: 999,
          is_active: false
        };
        
        const { error: insertError } = await supabase
          .from('values')
          .insert([testValue])
          .select();
          
        if (insertError) {
          testResults.push(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${insertError.message}`);
          if (insertError.code === '42501') {
            testResults.push('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ fix-values-rls.sql');
          }
        } else {
          testResults.push('‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–∞–±–æ—Ç–∞–µ—Ç');
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
          await supabase
            .from('values')
            .delete()
            .eq('title_et', 'Test Value')
            .eq('order_index', 999);
        }
        
        setStatus('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      }
      
    } catch (error) {
      setStatus('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
      testResults.push(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
    setDetails(testResults);
  };

  return (
    <div className="glass-effect rounded-xl p-6 mb-6">
      <h2 className="text-xl font-bold text-sage-900 mb-4">
        üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase
      </h2>
      
      <div className="mb-4">
        <div className="text-lg font-semibold mb-2">{status}</div>
        <div className="space-y-1">
          {details.map((detail, index) => (
            <div key={index} className="text-sm text-sage-700">
              {detail}
            </div>
          ))}
        </div>
      </div>
      
      <button
        onClick={testSupabaseConnection}
        className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
      >
        üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
      </button>
    </div>
  );
} 