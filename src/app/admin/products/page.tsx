'use client'

import { useAuth } from '@/components/auth/AuthProvider'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { productService } from '@/lib/products'
import { Product } from '@/types/product'
import { IconPlus, IconEdit, IconTrash, IconEye, IconEyeOff } from '@tabler/icons-react'
import { useLanguage } from '@/components/i18n/LanguageProvider'
import Link from 'next/link'

export default function AdminProductsPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const { currentLanguage } = useLanguage();
  
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [newBrandName, setNewBrandName] = useState('');

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (user) {
      loadProducts();
    }
  }, [user]);

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productService.getProducts();
      setProducts(data);
    } catch (error) {
      console.error('Error loading products:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–µ–Ω–¥–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?')) {
      return;
    }

    try {
      await productService.deleteProduct(id);
      await loadProducts();
    } catch (error) {
      console.error('Error deleting product:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
  };

  const handleTogglePublished = async (id: string, published: boolean) => {
    try {
      await productService.togglePublished(id, !published);
      await loadProducts();
    } catch (error) {
      console.error('Error toggling published status:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
  };

  // Fallback brands for when no products in database
  const fallbackBrands: Product[] = [
    {
      id: "1",
      name: "GEHWOL",
      name_et: "GEHWOL",
      name_ru: "GEHWOL", 
      description: "Saksa kvaliteetne jalgade hoolduse br√§nd.",
      description_et: "Saksa kvaliteetne jalgade hoolduse br√§nd. Spetsialiseerunud meditsiinitoodetele jalgade tervise tagamiseks. Kasutame nende professionaalseid vahendeid ja preparaate.",
      description_ru: "–ù–µ–º–µ—Ü–∫–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–æ–≥–∞–º–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç–æ–ø. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã.",
      published: true
    },
    {
      id: "2",
      name: "Allpresan",
      name_et: "Allpresan",
      name_ru: "Allpresan",
      description: "Innovaatiline Saksa br√§nd jalgade hoolduseks.",
      description_et: "Innovaatiline Saksa br√§nd, mis spetsialiseerub jalgade nahapesu ja hooldusvahenditele. Nende tooted on eriti t√µhusad kuiva naha ja pragude korral.",
      description_ru: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–µ–º–µ—Ü–∫–∏–π –±—Ä–µ–Ω–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π –Ω–æ–≥. –ò—Ö –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –ø—Ä–∏ —Å—É—Ö–æ–π –∫–æ–∂–µ –∏ —Ç—Ä–µ—â–∏–Ω–∞—Ö.",
      published: true
    },
    {
      id: "3",
      name: "SANAMED",
      name_et: "SANAMED",
      name_ru: "SANAMED",
      description: "Professionaalne meditsiinitehnika ja instrumentide tootja.",
      description_et: "Professionaalne meditsiinitehnika ja instrumentide tootja. Pakume kvaliteetseid ja turvaliseid lahendusi podoloogia valdkonnas.",
      description_ru: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥–æ–ª–æ–≥–∏–∏.",
      published: true
    },
    {
      id: "4",
      name: "HFL laboratories",
      name_et: "HFL laboratories",
      name_ru: "HFL laboratories",
      description: "Teaduslik l√§henemisega laboratoorium.",
      description_et: "Teaduslik l√§henemisega laboratoorium, mis arendab innovaatilisi lahendusi jalgade tervisele. Nende tooted p√µhinevad uusimatel teadusuuringutel.",
      description_ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Å –Ω–∞—É—á–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç–æ–ø. –ò—Ö –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–æ–≤–µ–π—à–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.",
      published: true
    },
    {
      id: "5",
      name: "BioFeet",
      name_et: "BioFeet",
      name_ru: "BioFeet",
      description: "√ñkoloogiliselt puhas br√§nd jalgade hoolduseks.",
      description_et: "√ñkoloogiliselt puhas br√§nd, mis keskendub looduslikele koostisosadele jalgade hoolduses. Sobib tundliku nahaga klientidele.",
      description_ru: "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–π –±—Ä–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –Ω–æ–≥–∞–º–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–µ–π.",
      published: true
    }
  ];

  const getLocalizedName = (product: Product) => {
    if (currentLanguage === 'et' && product.name_et) return product.name_et;
    if (currentLanguage === 'ru' && product.name_ru) return product.name_ru;
    return product.name;
  };

  const getLocalizedDescription = (product: Product) => {
    if (currentLanguage === 'et' && product.description_et) return product.description_et;
    if (currentLanguage === 'ru' && product.description_ru) return product.description_ru;
    return product.description;
  };

  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg text-gray-600 animate-pulse">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  if (loading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="glass-effect rounded-xl p-8 text-center">
          <div className="text-sage-600">–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...</div>
        </div>
      </div>
    );
  }

  // Use fallback brands if no products in database
  const displayProducts = products.length > 0 ? products : fallbackBrands;

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Breadcrumbs */}
      <div className="mb-6">
        <nav className="text-sm">
          <Link href="/admin" className="text-poppy-500 hover:text-poppy-600">
            –ê–¥–º–∏–Ω
          </Link>
          <span className="mx-2 text-sage-400">‚Ä∫</span>
          <span className="text-sage-700">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π</span>
        </nav>
      </div>

      <div className="glass-effect rounded-xl p-6 mb-6">
        <h1 className="text-2xl font-bold text-sage-900 mb-4">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        </h1>

        <div className="mb-6 flex items-center gap-3">
          <button
            onClick={() => setShowCreateForm(true)}
            className="px-4 py-3 bg-sage-600 text-white rounded-lg hover:bg-sage-700"
          >
            –î–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥
          </button>
        </div>

        {/* Brands Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {displayProducts.map((product) => (
            <div
              key={product.id}
              className="glass-effect rounded-xl p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border"
            >
              {/* Brand Header */}
              <div className="text-center mb-4">
                <h3 className="text-xl font-bold text-sage-900 mb-2">
                  {getLocalizedName(product)}
                </h3>
                <div className="w-12 h-12 bg-poppy-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-2xl">üè∑Ô∏è</span>
          </div>
        </div>

              {/* Description */}
              <div className="mb-4">
                <p className="text-sm text-sage-700 leading-relaxed">
                  {product.description}
                </p>
              </div>

              {/* Actions */}
              <div className="space-y-3">
                <Link
                  href={`/admin/products/${product.id}`}
                  className="w-full px-4 py-2 bg-poppy-500 text-white rounded-lg hover:bg-poppy-600 transition-colors text-center block"
                >
                  üõ†Ô∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
                </Link>
                
                
                <button
                  onClick={() => { setEditingProduct(product); setShowCreateForm(true); }}
                  className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥
                </button>
                <button
                  onClick={() => handleTogglePublished(product.id, product.published)}
                  className="w-full px-4 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors"
                >
                  {product.published ? '–°–∫—Ä—ã—Ç—å' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                </button>
                <button
                  onClick={() => handleDelete(product.id)}
                  className="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±—Ä–µ–Ω–¥
                </button>
                          </div>

              {/* Status Badge */}
              <div className="mt-4 text-center">
                <span className={`inline-block px-3 py-1 text-xs rounded-full ${
                              product.published
                    ? 'bg-green-100 text-green-700' 
                    : 'bg-gray-100 text-gray-700'
                }`}>
                            {product.published ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–°–∫—Ä—ã—Ç'}
                          </span>
                          </div>
            </div>
          ))}
        </div>

        {displayProducts.length === 0 && (
          <div className="text-center py-8 text-sage-600">
            –ë—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
          </div>
        )}
      </div>
      {showCreateForm && (
        <ProductForm
          product={editingProduct}
          onClose={() => { setShowCreateForm(false); setEditingProduct(null); }}
          onSave={async () => {
            setShowCreateForm(false);
            setEditingProduct(null);
            await loadProducts();
          }}
        />
      )}
    </div>
  );
}

// Product Form Component
function ProductForm({ 
  product, 
  onClose, 
  onSave 
}: { 
  product?: Product | null
  onClose: () => void
  onSave: () => void
}) {
  const [formData, setFormData] = useState({
    name: '',
    name_et: '',
    name_ru: '',
    description: '',
    description_et: '',
    description_ru: '',
    published: true,
  });

  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        name_et: product.name_et || '',
        name_ru: product.name_ru || '',
        description: product.description || '',
        description_et: product.description_et || '',
        description_ru: product.description_ru || '',
        published: product.published,
      });
    }
  }, [product]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Submit function called!', { formData, product });
    
    try {
      if (product) {
        console.log('Updating product:', product.id);
        await productService.updateProduct(product.id, formData);
        console.log('Product updated successfully');
      } else {
        console.log('Creating new product');
        await productService.createProduct(formData);
        console.log('Product created successfully');
      }
      onSave();
    } catch (error) {
      console.error('Error saving product:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' + (error as Error).message);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-bold mb-4">
          {product ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Short name (visible title) */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π) *</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>

          {/* Short description (–æ–±—â–∞—è) */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—â–∞—è)</label>
            <input
              type="text"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ (—ç—Å—Ç–æ–Ω—Å–∫–∏–π)</label>
              <input
                type="text"
                value={formData.name_et}
                onChange={(e) => setFormData({ ...formData, name_et: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)</label>
              <input
                type="text"
                value={formData.name_ru}
                onChange={(e) => setFormData({ ...formData, name_ru: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Full descriptions (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) */}
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—ç—Å—Ç–æ–Ω—Å–∫–∏–π)</label>
              <textarea
                rows={5}
                value={formData.description_et}
                onChange={(e) => setFormData({ ...formData, description_et: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)</label>
              <textarea
                rows={5}
                value={formData.description_ru}
                onChange={(e) => setFormData({ ...formData, description_ru: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Published */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="published"
              checked={formData.published}
              onChange={(e) => setFormData({ ...formData, published: e.target.checked })}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="published" className="ml-2 block text-sm text-gray-900">
              –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
            </label>
          </div>

          {/* Buttons */}
          <div className="flex justify-end space-x-4 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {product ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 